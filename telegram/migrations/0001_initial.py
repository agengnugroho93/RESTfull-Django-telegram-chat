# Generated by Django 2.1.3 on 2018-11-29 04:05

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Adminlog',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('contextid', models.IntegerField(db_column='ContextID')),
                ('date', models.IntegerField(db_column='Date')),
                ('userid', models.IntegerField(blank=True, db_column='UserID', null=True)),
                ('action', models.TextField(blank=True, db_column='Action', null=True)),
                ('data', models.TextField(blank=True, db_column='Data', null=True)),
            ],
            options={
                'db_table': 'AdminLog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('dateupdated', models.IntegerField(db_column='DateUpdated')),
                ('about', models.TextField(blank=True, db_column='About', null=True)),
                ('title', models.TextField(db_column='Title')),
                ('username', models.TextField(blank=True, db_column='Username', null=True)),
                ('pinmessageid', models.IntegerField(blank=True, db_column='PinMessageID', null=True)),
            ],
            options={
                'db_table': 'Channel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('dateupdated', models.IntegerField(db_column='DateUpdated')),
                ('title', models.TextField(db_column='Title')),
                ('migratedtoid', models.IntegerField(blank=True, db_column='MigratedToID', null=True)),
            ],
            options={
                'db_table': 'Chat',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Chatparticipants',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contextid', models.IntegerField(db_column='ContextID')),
                ('dateupdated', models.IntegerField(db_column='DateUpdated')),
                ('added', models.TextField(db_column='Added')),
                ('removed', models.TextField(db_column='Removed')),
            ],
            options={
                'db_table': 'ChatParticipants',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Forward',
            fields=[
                ('id', models.IntegerField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('originaldate', models.IntegerField(db_column='OriginalDate')),
                ('fromid', models.IntegerField(blank=True, db_column='FromID', null=True)),
                ('channelpost', models.IntegerField(blank=True, db_column='ChannelPost', null=True)),
                ('postauthor', models.TextField(blank=True, db_column='PostAuthor', null=True)),
            ],
            options={
                'db_table': 'Forward',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.IntegerField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('mimetype', models.TextField(blank=True, db_column='MimeType', null=True)),
                ('size', models.IntegerField(blank=True, db_column='Size', null=True)),
                ('type', models.TextField(blank=True, db_column='Type', null=True)),
                ('localid', models.IntegerField(blank=True, db_column='LocalID', null=True)),
                ('volumeid', models.IntegerField(blank=True, db_column='VolumeID', null=True)),
                ('secret', models.IntegerField(blank=True, db_column='Secret', null=True)),
                ('extra', models.TextField(blank=True, db_column='Extra', null=True)),
                ('thumbnailid', models.ForeignKey(blank=True, db_column='ThumbnailID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='telegram.Media')),
            ],
            options={
                'db_table': 'Media',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('contextid', models.IntegerField(db_column='ContextID')),
                ('date', models.IntegerField(db_column='Date')),
                ('fromid', models.IntegerField(blank=True, db_column='FromID', null=True)),
                ('message', models.TextField(blank=True, db_column='Message', null=True)),
                ('replymessageid', models.IntegerField(blank=True, db_column='ReplyMessageID', null=True)),
                ('postauthor', models.TextField(blank=True, db_column='PostAuthor', null=True)),
                ('viewcount', models.IntegerField(blank=True, db_column='ViewCount', null=True)),
                ('formatting', models.TextField(blank=True, db_column='Formatting', null=True)),
                ('serviceaction', models.TextField(blank=True, db_column='ServiceAction', null=True)),
                ('forwardid', models.ForeignKey(blank=True, db_column='ForwardID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='telegram.Forward')),
                ('mediaid', models.ForeignKey(blank=True, db_column='MediaID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='telegram.Media')),
            ],
            options={
                'db_table': 'Message',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('contextid', models.IntegerField(db_column='ContextID', primary_key=True, serialize=False, unique=True)),
                ('id', models.IntegerField(db_column='ID')),
                ('date', models.IntegerField(db_column='Date')),
                ('stopat', models.IntegerField(db_column='StopAt')),
            ],
            options={
                'db_table': 'Resume',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Resumeentity',
            fields=[
                ('contextid', models.IntegerField(db_column='ContextID', primary_key=True, serialize=False)),
                ('id', models.IntegerField(db_column='ID')),
                ('accesshash', models.IntegerField(blank=True, db_column='AccessHash', null=True)),
            ],
            options={
                'db_table': 'ResumeEntity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Resumemedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mediaid', models.IntegerField(db_column='MediaID', unique=True)),
                ('contextid', models.IntegerField(db_column='ContextID')),
                ('senderid', models.IntegerField(blank=True, db_column='SenderID', null=True)),
                ('date', models.IntegerField(blank=True, db_column='Date', null=True)),
            ],
            options={
                'db_table': 'ResumeMedia',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Selfinformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(blank=True, db_column='UserID', null=True)),
            ],
            options={
                'db_table': 'SelfInformation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Supergroup',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('dateupdated', models.IntegerField(db_column='DateUpdated')),
                ('about', models.TextField(blank=True, db_column='About', null=True)),
                ('title', models.TextField(db_column='Title')),
                ('username', models.TextField(blank=True, db_column='Username', null=True)),
                ('pinmessageid', models.IntegerField(blank=True, db_column='PinMessageID', null=True)),
                ('pictureid', models.ForeignKey(blank=True, db_column='PictureID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='telegram.Media')),
            ],
            options={
                'db_table': 'Supergroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('dateupdated', models.IntegerField(db_column='DateUpdated')),
                ('firstname', models.TextField(db_column='FirstName')),
                ('lastname', models.TextField(blank=True, db_column='LastName', null=True)),
                ('username', models.TextField(blank=True, db_column='Username', null=True)),
                ('phone', models.TextField(blank=True, db_column='Phone', null=True)),
                ('bio', models.TextField(blank=True, db_column='Bio', null=True)),
                ('bot', models.IntegerField(blank=True, db_column='Bot', null=True)),
                ('commonchatscount', models.IntegerField(db_column='CommonChatsCount')),
                ('pictureid', models.ForeignKey(blank=True, db_column='PictureID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='telegram.Media')),
            ],
            options={
                'db_table': 'User',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, db_column='Version', null=True)),
            ],
            options={
                'db_table': 'Version',
                'managed': True,
            },
        ),
        migrations.AlterUniqueTogether(
            name='resumeentity',
            unique_together={('contextid', 'id')},
        ),
        migrations.AlterUniqueTogether(
            name='chatparticipants',
            unique_together={('contextid', 'dateupdated')},
        ),
        migrations.AddField(
            model_name='chat',
            name='pictureid',
            field=models.ForeignKey(blank=True, db_column='PictureID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='telegram.Media'),
        ),
        migrations.AddField(
            model_name='channel',
            name='pictureid',
            field=models.ForeignKey(blank=True, db_column='PictureID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='telegram.Media'),
        ),
        migrations.AlterUniqueTogether(
            name='adminlog',
            unique_together={('id', 'contextid')},
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together={('id', 'dateupdated')},
        ),
        migrations.AlterUniqueTogether(
            name='supergroup',
            unique_together={('id', 'dateupdated')},
        ),
        migrations.AlterUniqueTogether(
            name='message',
            unique_together={('id', 'contextid')},
        ),
        migrations.AlterUniqueTogether(
            name='chat',
            unique_together={('id', 'dateupdated')},
        ),
        migrations.AlterUniqueTogether(
            name='channel',
            unique_together={('id', 'dateupdated')},
        ),
    ]
